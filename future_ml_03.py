# -*- coding: utf-8 -*-
"""FUTURE_ML_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PthFHPE2EJx6vGu4cJQhDElaFSeMs90M
"""

import pandas as pd

data = pd.DataFrame({
    "question": [
        "How can I reset my password?",
        "What is the refund policy?",
        "Where is my order?",
        "How do I update my shipping address?",
        "What payment options do you accept?",
        "Can I cancel my order?",
        "How do I contact customer service?",
        "Do you offer international shipping?"
    ],
    "answer": [
        "To reset your password, click 'Forgot Password' on the login page.",
        "Refunds are processed within 5–7 business days to your original payment method.",
        "You can track your order using the tracking link sent to your email.",
        "You can update your shipping address in your profile settings or contact support.",
        "We accept Visa, MasterCard, PayPal, and Apple Pay.",
        "Yes, orders can be cancelled within 24 hours of placement.",
        "You can contact customer service via our Help Center or call 1-800-123-4567.",
        "Yes, we ship to over 50 countries worldwide."
    ]
})

import numpy as np
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('punkt_tab')

def clean_text(text):
    text = text.lower()
    text = text.translate(str.maketrans("", "", string.punctuation))
    tokens = word_tokenize(text)
    filtered_words = [word for word in tokens if word not in stopwords.words("english")]
    return " ".join(filtered_words)

data["cleaned_question"] = data["question"].apply(clean_text)

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(data["cleaned_question"])

def chatbot(user_input):
    cleaned_input = clean_text(user_input)
    user_vec = vectorizer.transform([cleaned_input])
    similarities = cosine_similarity(user_vec, X)
    best_match = np.argmax(similarities)
    score = similarities[0][best_match]
    if score > 0.3:
        return data["answer"][best_match]
    else:
        return "Sorry, I’m not sure how to help with that. Please contact support."

print("Customer Support Bot (type 'exit' to quit)")
while True:
    query = input("You: ")
    if query.lower() == "exit":
        break
    response = chatbot(query)
    print("Bot:", response)

!pip install gradio

import gradio as gr
gr.Interface(
    fn=chatbot,
    inputs=gr.Textbox(lines=2, placeholder="Ask your question..."),
    outputs="text",
    title="Customer Support Chatbot",
    description="Ask questions like 'How can I reset my password?' or 'Do you offer international shipping?'"
).launch()



